<script setup>
import AppLayout from "@/Layouts/AppLayout.vue";
import HeaderActions from "@/Components/HeaderActions.vue";
import { ref, computed, onMounted } from "vue";
import { usePage, router } from "@inertiajs/vue3";
import moment from "moment";
import HeaderInformation from "@/Components/Sections/HeaderInformation.vue";
import ProfileCard from "@/Components/Sections/ProfileCard.vue";
import Autocomplete from "@/Components/Data/Autocomplete.vue";
import Table from "@/Components/Data/Table.vue";
import ModalForm from "@/Components/Form/ModalForm.vue";
import { singularizeAndFormat } from "@/utils/global";
import { useColors } from "@/Composables/useColors";
import NavigationTabs from "@/Components/Navigation/NavigationTabs.vue";
import { useToast } from "vue-toastification";

const modelName = "educational-attainments";
const toast = useToast();

// Get colors from composable
const { buttonPrimaryBgColor, buttonPrimaryTextColor } = useColors();

const page = usePage();
const modelData = ref({
    data: [],
    links: []
});
const isLoading = ref(false);

// Modal states
const showCreateModal = ref(false);
const showViewModal = ref(false);
const showEditModal = ref(false);
const selectedRow = ref(null);
const modalType = ref('');

// Form fields for educational attainments
const educationalAttainmentFields = [
    {
        id: "level",
        label: "Level",
        model: "level",
        type: "select",
        required: true,
        options: [
            { value: "Elementary", text: "Elementary" },
            { value: "High School", text: "High School" },
            { value: "Vocational", text: "Vocational" },
            { value: "Bachelor's Degree", text: "Bachelor's Degree" },
            { value: "Master's Degree", text: "Master's Degree" },
            { value: "Doctorate", text: "Doctorate" },
        ],
        placeholder: "Select educational level",
    },
    {
        id: "school_name",
        label: "School Name",
        model: "school_name",
        type: "text",
        required: true,
        placeholder: "Enter school name",
    },
    {
        id: "from_date",
        label: "From Date",
        model: "from_date",
        type: "date",
        required: true,
        placeholder: "Select start date",
    },
    {
        id: "to_date",
        label: "To Date",
        model: "to_date",
        type: "date",
        required: true,
        placeholder: "Select end date",
    },
    {
        id: "honors_received",
        label: "Honors Received",
        model: "honors_received",
        type: "text",
        required: false,
        placeholder: "Enter honors or awards received",
    },
    {
        id: "file_path",
        label: "Document",
        model: "file_path",
        type: "file",
        required: false,
        placeholder: "Upload document",
    },
];

const emit = defineEmits(['action', 'refresh', 'updated']);

const headerActions = ref([
    {
        text: "Go Back",
        url: `/employees/${usePage().props.modelData.id}`,
        inertia: true,
        class: "border border-gray-400 hover:bg-gray-100 px-4 py-2 rounded text-gray-600",
    },
    {
        text: "Add Educational Attainment",
        type: "button",
        onClick: () => {
            showCreateModal.value = true;
        },
        class: "bg-blue-500 hover:bg-blue-600 px-4 py-2 rounded text-white",
    },
]);

const getQrUrl = (id) => {
    return route("qr.employees", { employee: usePage().props.modelData.id });
};

const profileDetails = [
    { label: "Name", value: "full_name", class: "text-xl font-bold" },
    { label: "Number", value: "number", class: "text-gray-600 font-semibold" },
    {
        has_qr: true,
        qr_data: (row) => getQrUrl(row.id),
        created_at: (row) => moment(row.created_at).fromNow(),
    },
];

const navigationTabs = ref([
    {
        text: "Overview",
        url: `/employees/${usePage().props.modelData.id}`,
        inertia: true,
        permission: "read employees",
    },
    {
        text: "Educational Attainments",
        url: `/employees/${usePage().props.modelData.id}/educational-attainments`,
        inertia: true,
        permission: "read employee educational attainments",
    },
    {
        text: "Work Histories",
        url: `/employees/${usePage().props.modelData.id}/work-histories`,
        inertia: true,
        permission: "read employee work histories",
    },
    {
        text: "Contact Details",
        url: `/employees/${usePage().props.modelData.id}/contact-details`,
        inertia: true,
        permission: "read employee contact details",
    },
    {
        text: "Dependents",
        url: `/employees/${usePage().props.modelData.id}/dependents`,
        inertia: true,
        permission: "read employee dependents",
    },
    {
        text: "Documents",
        url: `/employees/${usePage().props.modelData.id}/documents`,
        inertia: true,
        permission: "read employee documents",
    },
    {
        text: "Certificates & Training",
        url: `/employees/${usePage().props.modelData.id}/certificates`,
        inertia: true,
        permission: "read employee certificates",
    },
    {
        text: "Skills",
        url: `/employees/${usePage().props.modelData.id}/skills`,
        inertia: true,
        permission: "read employee skills",
    },
]);

// Define Table Columns
const columns = ref([
    { label: "Level", value: "level" },
    { label: "School", value: "school_name" },
    { 
        label: "Duration", 
        value: (row) => `${moment(row.from_date).format('MMM YYYY')} - ${moment(row.to_date).format('MMM YYYY')}` 
    },
    { label: "Honors Received", value: "honors_received" },
    { 
        label: "Document", 
        value: (row) => row.file_path ? "Available" : "Not Available",
        uri: (row) => row.file_path ? `/storage/${row.file_path}` : null,
        icon: "mdi-file-document",
    },
    { label: "Actions" },
]);

// Map custom buttons for table rows
const mapCustomButtons = (row) => ({
    ...row,
    employee_id: usePage().props.modelData.id,
    viewUrl: `/api/${modelName}/${row.id}`,
    editUrl: `/api/${modelName}/${row.id}/edit`,
    deleteUrl: `/api/${modelName}/${row.id}`,
    restoreUrl: row.deleted_at ? `/api/${modelName}/${row.id}/restore` : null,
    customUrls: [],
});

// Fetch Table Data
const fetchTableData = async (url = `/api/${modelName}?employee_id=${usePage().props.modelData.id}`) => {
    isLoading.value = true;
    try {
        const response = await axios.get(url);
        modelData.value = {
            data: response.data.data.map(mapCustomButtons),
            links: response.data.links || [],
            meta: response.data.meta || {}
        };
    } catch (error) {
        console.error("Error fetching data:", error.response?.data || error.message);
        toast.error("Failed to fetch educational attainments");
        // Initialize with empty data on error
        modelData.value = {
            data: [],
            links: [],
            meta: {}
        };
    } finally {
        isLoading.value = false;
    }
};

// Handle table actions
const handleAction = async ({ action, row }) => {
    try {
        if (action === "delete") {
            await axios.delete(row.deleteUrl);
            await fetchTableData();
            toast.success("Educational attainment deleted successfully");
        } else if (action === "restore") {
            await axios.post(row.restoreUrl);
            await fetchTableData();
            toast.success("Educational attainment restored successfully");
        }
    } catch (error) {
        console.error("Action failed:", error.response?.data || error.message);
        toast.error("Action failed");
    }
};

// Handle create action
const handleCreate = async (data) => {
    try {
        await fetchTableData();
        showCreateModal.value = false;
        toast.success("Educational attainment created successfully");
    } catch (error) {
        console.error("Error creating:", error);
        toast.error("Failed to create educational attainment");
    }
};

// Handle view action
const handleView = (row) => {
    console.log('View clicked:', row);
    // First reset all states
    showCreateModal.value = false;
    showEditModal.value = false;
    selectedRow.value = null;
    modalType.value = '';
    
    // Then set new states
    selectedRow.value = row;
    modalType.value = 'view';
    showViewModal.value = true;
};

// Handle edit action
const handleEdit = (row) => {
    console.log('Edit clicked:', row);
    // First reset all states
    showCreateModal.value = false;
    showViewModal.value = false;
    selectedRow.value = null;
    modalType.value = '';
    
    // Then set new states
    selectedRow.value = row;
    modalType.value = 'edit';
    showEditModal.value = true;
};

// Handle form submissions
const handleFormSubmit = async (data) => {
    try {
        await fetchTableData();
        showEditModal.value = false;
        showViewModal.value = false;
        selectedRow.value = null;
        modalType.value = '';
        toast.success("Educational attainment saved successfully");
    } catch (error) {
        console.error("Error saving:", error);
        toast.error("Failed to save educational attainment");
    }
};

// Handle modal close
const handleModalClose = () => {
    showCreateModal.value = false;
    showViewModal.value = false;
    showEditModal.value = false;
    selectedRow.value = null;
    modalType.value = '';
};

// Handle search selection
const handleSearchSelect = async (selectedModelData) => {
    try {
        const response = await axios.get(`/api/${modelName}/${selectedModelData.id}`);
        const fetchedData = response.data;

        modelData.value = {
            data: [mapCustomButtons(fetchedData)],
            links: [],
            meta: {}
        };
    } catch (error) {
        console.error("Error fetching selected model data:", error.response?.data || error.message);
        toast.error("Failed to load the selected data");
        // Initialize with empty data on error
        modelData.value = {
            data: [],
            links: [],
            meta: {}
        };
    }
};

// Initialize Table Data
onMounted(() => fetchTableData());
</script>

<template>
    <AppLayout :title="`${singularizeAndFormat(modelName)} Details`">
        <template #header>
            <div class="flex justify-between items-center">
                <h2 class="font-semibold text-xl text-gray-800 leading-tight">
                    {{ singularizeAndFormat(modelName) }} Details
                </h2>
                <HeaderActions :actions="headerActions" />
            </div>
        </template>

        <div class="max-w-12xl mx-auto">
            <NavigationTabs :tabs="navigationTabs" />

            <div class="bg-white overflow-hidden shadow-sm sm:rounded-lg pt-6">
                <HeaderInformation
                    :title="`${singularizeAndFormat(modelName)} Details`"
                    :modelData="modelData"
                />
                <ProfileCard :modelData="usePage().props.modelData" :columns="profileDetails" />

                <div class="border-t border-gray-200" />
                <div class="p-6">
                    <div class="mb-4">
                        <Autocomplete
                            :searchUrl="`/api/autocomplete/${modelName}`"
                            :modelName="modelName"
                            :placeholder="`Search ${modelName}...`"
                            :mapCustomButtons="mapCustomButtons"
                            @select="handleSearchSelect"
                        />
                    </div>

                    <Table
                        :data="modelData"
                        :columns="columns"
                        :modelName="modelName"
                        :isLoading="isLoading"
                        :formFields="educationalAttainmentFields"
                        :viewAsModal="true"
                        :editAsModal="true"
                        @paginate="fetchTableData"
                        @action="handleAction"
                        @refresh="fetchTableData"
                        @updated="handleFormSubmit"
                        @view="handleView"
                        @edit="handleEdit"
                    />
                </div>
            </div>
        </div>

        <!-- View Modal -->
        <ModalForm
            v-if="modalType === 'view'"
            v-model:show="showViewModal"
            :title="'View Educational Attainment'"
            :fields="educationalAttainmentFields"
            :modelData="selectedRow || {}"
            :isViewOnly="true"
            @close="handleModalClose"
        />

        <!-- Edit Modal -->
        <ModalForm
            v-if="modalType === 'edit'"
            v-model:show="showEditModal"
            :title="'Edit Educational Attainment'"
            :fields="educationalAttainmentFields"
            :modelData="selectedRow || {}"
            :submitUrl="selectedRow ? `/api/${modelName}/${selectedRow.id}` : ''"
            method="put"
            @updated="handleFormSubmit"
            @close="handleModalClose"
        />

        <!-- Create Modal -->
        <ModalForm
            v-model:show="showCreateModal"
            :title="'Add Educational Attainment'"
            :fields="educationalAttainmentFields"
            :modelData="{ employee_id: usePage().props.modelData.id }"
            :submitUrl="`/api/${modelName}`"
            method="post"
            @updated="handleCreate"
            @close="showCreateModal = false"
        />
    </AppLayout>
</template>
