<script setup>
import AppLayout from "@/Layouts/AppLayout.vue";
import HeaderActions from "@/Components/HeaderActions.vue";
import SidebarNavigation from "@/Components/SidebarNavigation.vue";
import FormSetup from "@/Components/FormSetup.vue";
import FormField from "@/Components/FormField.vue";
import InputError from "@/Components/InputError.vue";
import { router, usePage } from "@inertiajs/vue3";
import { ref, onMounted, computed } from "vue";
import { parseInput } from "@/utils/parseInput";

const modelName = "app-settings";
const isSubmitting = ref(false);
const page = usePage();

const sidebarLinks = computed(() => [
    {
        label: "General",
        url: `/app/settings`,
        icon: "mdi-view-dashboard-outline",
    },
    {
        label: "Style Kit",
        url: `/app/settings/style-kit`,
        icon: "mdi-palette-outline",
    },
]);

const formData = ref({});
const errors = ref({}); // Object to hold error messages

const headerActions = ref([]);

const fields = ref([
    {
        id: "navbar_color",
        label: "Navbar Color",
        model: "navbar_color",
        type: "color",
        placeholder: "Pick a color for the navbar",
        required: true,
    },
    {
        id: "navbar_text_color",
        label: "Navbar Text Color",
        model: "navbar_text_color",
        type: "color",
        placeholder: "Pick a text color for the navbar",
        required: true,
    },
    {
        id: "navbar_active_color",
        label: "Navbar Active Color",
        model: "navbar_active_color",
        type: "color",
        placeholder: "Pick a color for the active route navbar",
        required: true,
    },
    {
        id: "navbar_hover_color",
        label: "Navbar Hover Color",
        model: "navbar_hover_color",
        type: "color",
        placeholder: "Pick a text hover color for the navbar",
        required: true,
    },
    {
        id: "navbar_hover_text_color",
        label: "Navbar Hover Text Color",
        model: "navbar_hover_text_color",
        type: "color",
        placeholder: "Pick a text hover color for the navbar",
        required: true,
    },
    {
        id: "sidebar_color",
        label: "Sidebar Color",
        model: "sidebar_color",
        type: "color",
        placeholder: "Pick a color for the sidebar",
        required: true,
    },
    {
        id: "sidebar_text_color",
        label: "Sidebar Text Color",
        model: "sidebar_text_color",
        type: "color",
        placeholder: "Pick a text color for the sidebar",
        required: true,
    },
    {
        id: "primary_color",
        label: "Primary Color",
        model: "primary_color",
        type: "color",
        placeholder: "Pick a primary color",
        required: true,
    },
    {
        id: "secondary_color",
        label: "Secondary Color",
        model: "secondary_color",
        type: "color",
        placeholder: "Pick a secondary color",
        required: true,
    },
]);

onMounted(() => {
    formData.value = { ...page.props.settings };
});

const submitForm = async () => {
    try {
        isSubmitting.value = true;

        const formDataObj = parseInput(fields.value, formData.value);
        formDataObj.append("_method", "PUT");

        const response = await axios.post(
            `/api/${modelName}/style/update`,
            formDataObj,
            {
                headers: {
                    "Content-Type": "multipart/form-data",
                },
            }
        );

        router.get(`/app/settings/style-kit`);
    } catch (error) {
        if (error.response && error.response.data.errors) {
            errors.value = error.response.data.errors;
        }
    } finally {
        isSubmitting.value = false;
    }
};
</script>

<template>
    <AppLayout title="Edit Company">
        <template #header>
            <div class="flex justify-between items-center">
                <h2 class="font-semibold text-xl text-gray-800 leading-tight">
                    Edit App Settings
                </h2>
                <HeaderActions :actions="headerActions" />
            </div>
        </template>

        <div class="py-12">
            <div class="max-w-7xl mx-auto sm:px-6 lg:px-8 flex">
                <!-- Sidebar -->
                <SidebarNavigation :links="sidebarLinks" />

                <!-- Main Content -->
                <div
                    class="bg-white overflow-hidden shadow-xl sm:rounded-lg flex-1 ml-6"
                >
                    <FormSetup
                        :form-classes="'md:grid md:grid-cols-1 md:gap-2'"
                        :col-span="'md:col-span-1'"
                        @submitted="submitForm"
                    >
                        <template #title> Edit App Settings </template>
                        <template #description>
                            <p>
                                Modify the form below to update the App
                                Settings.
                            </p>
                            <p class="mt-1 text-sm text-gray-500">
                                <span class="text-red-500 font-semibold"
                                    >*</span
                                >
                                Fields with this mark are required.
                            </p>
                        </template>

                        <!-- Dynamic Form Fields -->
                        <template #form>
                            <div v-for="field in fields" :key="field.id">
                                <FormField
                                    :id="field.id"
                                    :label="field.label"
                                    :type="field.type"
                                    :placeholder="field.placeholder"
                                    :required="field.required"
                                    :input-classes="field.class"
                                    :options="field.options || []"
                                    v-model="formData[field.model]"
                                />
                                <!-- InputError component for showing field-specific errors -->
                                <InputError :message="errors[field.model]" />
                            </div>
                        </template>

                        <template #actions>
                            <button
                                type="submit"
                                class="inline-flex items-center px-4 py-2 bg-blue-500 border border-transparent rounded-md font-semibold text-xs text-white uppercase tracking-widest hover:bg-blue-600 active:bg-blue-700 focus:outline-none focus:ring focus:ring-blue-300 disabled:opacity-25 transition"
                                :disabled="isSubmitting"
                            >
                                <span
                                    v-if="isSubmitting"
                                    class="animate-spin mr-2"
                                >
                                    <svg
                                        class="w-4 h-4 text-white"
                                        xmlns="http://www.w3.org/2000/svg"
                                        fill="none"
                                        viewBox="0 0 24 24"
                                    >
                                        <circle
                                            class="opacity-25"
                                            cx="12"
                                            cy="12"
                                            r="10"
                                            stroke="currentColor"
                                            stroke-width="4"
                                        ></circle>
                                        <path
                                            class="opacity-75"
                                            fill="currentColor"
                                            d="M4 12a8 8 0 018-8v8z"
                                        ></path>
                                    </svg>
                                </span>
                                <span v-if="!isSubmitting">Update</span>
                                <span v-else>Updating...</span>
                            </button>
                        </template>
                    </FormSetup>
                </div>
            </div>
        </div>
    </AppLayout>
</template>
